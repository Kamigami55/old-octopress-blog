<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tutorial | Eason's blog]]></title>
  <link href="https://easonchang.com/blog/categories/tutorial/atom.xml" rel="self"/>
  <link href="https://easonchang.com/"/>
  <updated>2016-09-19T15:36:57+08:00</updated>
  <id>https://easonchang.com/</id>
  <author>
    <name><![CDATA[Eason Chang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[在MacOS使用putty Key進行ssh連線]]></title>
    <link href="https://easonchang.com/2016/08/18/using-ssh-with-putty-key-on-macos/"/>
    <updated>2016-08-18T11:00:00+08:00</updated>
    <id>https://easonchang.com/2016/08/18/using-ssh-with-putty-key-on-macos</id>
    <content type="html"><![CDATA[<h1>Quick Reference：</h1>

<pre><code class="bash">$ brew install putty #安裝puttygen套件
$ puttygen &lt;your-putty-key.ppk&gt; -O private-openssh -o &lt;your-ssh-key.pem&gt; #將putty key轉換成ssh key
$ chmod 400 &lt;your-ssh-key.pem&gt; #調整.pem權限
$ ssh -i &lt;your-ssh-key.pem&gt; &lt;user@your.server.com&gt; #使用.pem進行ssh連線
</code></pre>

<!-- more -->


<hr />

<p>突然發現學程的網站有小bug，所以需要連上網站所在的AWS(Amazon Web Service)伺服器裡修改程式碼。但建置網站的學長只留下了一個.ppk的putty專用SSH認證檔，而我這台破Mac實在沒容量給我再灌一台Windows然後裝上Putty來連線，所以我就開始研究如何讓MacOS內建的ssh指令也能吃進這支.ppk的putty key認證檔。</p>

<p>以下是我找到的解法：</p>

<h1>1.使用puttygen將putty key轉換成ssh可用的key</h1>

<p>ssh指令無法接受.ppk的putty key，必須先轉換成ssh可以使用的key</p>

<p>puttygen這支程式可以幫你轉換，你可以使用<a href="http://brew.sh/index_zh-tw.html">Homebrew</a>來安裝它：</p>

<pre><code class="bash">$ brew install putty
</code></pre>

<p>接著可以輸入下面這條指令，將putty key轉換成ssh key：</p>

<pre><code class="bash">$ puttygen &lt;your-putty-key.ppk&gt; -O private-openssh -o &lt;your-ssh-key.pem&gt;
</code></pre>

<h1>2.為ssh key設定適當的存取權限</h1>

<p>如果你的ssh key檔的權限太過開放，伺服器會阻擋你使用這支key來連線，所以你必須為它設定適當的權限（有時候不需要設定權限就是對的了）：</p>

<pre><code class="bash">$ chmod 400 &lt;your-ssh-key.pem&gt;
</code></pre>

<h1>3.連線</h1>

<p>接著你可以用它來進行連線啦！</p>

<pre><code class="bash">$ ssh -i &lt;your-ssh-key.pem&gt; &lt;user@your.server.com&gt;
</code></pre>

<hr />

<p>Reference: <a href="https://stackoverflow.com/questions/3475069/use-ppk-file-in-mac-terminal-to-connect-to-remote-connection-over-ssh">https://stackoverflow.com/questions/3475069/use-ppk-file-in-mac-terminal-to-connect-to-remote-connection-over-ssh</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用production Mode啟動你的rails專案]]></title>
    <link href="https://easonchang.com/2016/08/16/start-your-rails-project-with-production-mode/"/>
    <updated>2016-08-16T02:34:00+08:00</updated>
    <id>https://easonchang.com/2016/08/16/start-your-rails-project-with-production-mode</id>
    <content type="html"><![CDATA[<h1>Quick Reference:</h1>

<pre><code class="bash">$ RAILS_ENV=production rake db:migrate
$ rake secret //產生secret key
$ export SECRET_KEY_BASE=[貼入上個指令產生出來的密鑰]
$ vim config/initializers/assets.rb  //加入用到的assets路徑
確認各處引用assets的方法正確
$ RAILS_ENV=production rake assets:precompile
$ vim config/environments/production.rb  //將這行改成true: config.serve_static_assets = true
$ rails s -e production
</code></pre>

<!-- more -->


<hr />

<h1>什麼是production模式？為什麼要用它？</h1>

<p>在通常情況下，直接在你的專案裡下<code>$ rails s</code>這條指令，我們是使用development mode來啟動你的專案</p>

<p>在development模式下，大部分的修改都會直接顯現在網頁上，方便開發</p>

<p>但實際讓系統上線，我們不會使用development模式，而是<strong>production模式</strong></p>

<p>在production模式裡，rails會將assets預編譯在一起(pre-compile)，並放在public/資料夾底下以供存取，這能<strong>增進網站效能</strong></p>

<h1>使用production mode啟動rails專案</h1>

<h2>0.migrate你的資料庫</h2>

<p>production mode和development mode的資料庫是分開的，所以你需要再migrate一次</p>

<pre><code class="bash">$ RAILS_ENV=production rake db:migrate
</code></pre>

<h2>1.修改config/secret.yml，設定production mode的secret_key_base</h2>

<p>要順利運行rails程式，你需要設定一個叫<strong>secret_key_base</strong>的東西，它是rails用來認證瀏覽器cookie的一串密鑰。rails已經幫你在development mode和test mode設定好了，但production mode沒有，你得自己來，它的設定在<strong>config/secret.yml</strong>這隻檔案，讓我們來看看它：</p>

<pre><code class="c secret.yml">// development mode的設定
// 它使用 b1f4eb...3a9 這串密鑰（隨機生成的）
development:
  secret_key_base: b1f4eb6c1d97f627fbc0a3919fc27ab5f831200cdd0ea72317f404a2b9d878192bca27d92380f56051c60d0a364c86fe53d9b9866d487a17cf06582a783723a9

// test mode使用 fe9d...c3b 這串密鑰
test:
  secret_key_base: fe9d49b7edc8e3a4dfa47c0682974aca4572388e929ea3e4f037b3e8841747fc3029e030bbd102a62d372596b4d753dd0c419b7425a8dcceca3817cf7d5dbc3b

// production mode從執行環境裡抓 $SECRET_KEY_BASE 這個環境變數當作密鑰，但正常情況下該變數並不存在，所以出錯
production:
  secret_key_base: &lt;%= ENV["SECRET_KEY_BASE"] %&gt;
</code></pre>

<p>你有兩種方法能設定production mode的secret_key_base</p>

<h3>(1)比較簡易的做法是直接寫死一串固定的密鑰給它：</h3>

<pre><code class="c secret.yml">// 前略...

production:
// 刪掉原本的 &lt;%= ... %&gt; ，替換成隨便一串長度30以上的英數組合字串給他當密鑰
    secret_key_base: iameasonchangiamhandsomeiamthekingoftheworldnoonecandefeatmeiwantagirlfriendiamaloserqq
</code></pre>

<h3>(2)更安全的做法是把密鑰設在執行環境中：</h3>

<pre><code class="bash">$ rake secret // 生成一串密鑰，顯示在終端機上
$ export SECRET_KEY_BASE=[此處貼上你剛剛產生的密鑰] // 把密鑰設定至環境變數 $SECRET_KEY_BASE
</code></pre>

<p>但只做到這樣的話，重開終端機的話環境變數設定就消失了，所以可以把設定寫進環境設定檔裡頭</p>

<p>像我使用zsh的話，環境設定檔是<strong>./.zshrc</strong>
而Mac的terminal預設的bash，則是<strong>./.bash_profile</strong></p>

<pre><code class="bash .zshrc">// 在.zshrc中插入下面這行
export SECRET_KEY_BASE=[此處貼上你剛剛產生的密鑰]
</code></pre>

<p>到此你應該可以無錯誤地使用production mode開啟你的rails專案了，你可以下<code>$ rails s -e production</code>來開啟伺服器，並且用瀏覽器連至<code>localhost:3000</code>查看目前的結果</p>

<p>你的畫面應該跟我很像，怎麼醜不拉幾的？我不眠不休設計出來的精美網頁呢？</p>

<p><img src="https://i.imgur.com/oVAdVyK.png?2" alt="Imgur" /></p>

<p>那是因為你還沒有告訴rails你用到了哪些設計元素，接下來的步驟教你怎麼做：</p>

<h2>2.告訴rails你有哪些assets需要被pre-compile</h2>

<p>前面我們提過，使用production mode的理由是<strong>增進網頁讀取效能</strong>，方法是<strong>預編譯(pre-compile)各類assets</strong>，而你需要手動告訴rails你有哪些assets需要預編譯，除了圖檔，所有使用到的assets都需要加入裡頭，如js、css檔</p>

<p>方法是更新<strong>config/initializers/assets.rb</strong>這隻檔案，加入你有使用到的assets的路徑：</p>

<pre><code class="c++ assets.rb">// 前略...
// 後面加入這一行，裡頭放入你要precompile的檔案
Rails.application.config.assets.precompile += [
  'bootstrap.js', // 請幫我compile vendor/assets/javascripts/bootstrap.js 這支檔案
    'courses/content.js', // 還有 app/assets/javascripts/courses/content.js
    'courses/chart.js',  // app/assets/javascripts/courses/chart.js 也要
    'new-index.css', // 還有這個css，它在app/assets/stylesheets/new-index.css.scss
    'login.css', // app/assets/stylesheets/login.css.erb也要
    'newcomer/*.css', // app/assets/stylesheets/newcomer/裡面的css檔都要！
    'NotoSans-Regular-ttf' // 這個是字形檔唷！它在app/assets/fonts/NotoSans-Regular-ttf
]
</code></pre>

<p>rails會去 <strong>app/assets/</strong> 和 <strong>vendor/assets/</strong> 這兩個資料夾去找你的assets檔案，並且會根據副檔名尋找對應的路徑：</p>

<ul>
<li>js檔會去找底下的 <strong>javascripts/</strong></li>
<li>css檔會去找底下的 <strong>stylesheets/</strong></li>
<li>font檔會去找底下的 <strong>fonts/</strong></li>
<li>image檔會去找底下的 <strong>images/</strong></li>
</ul>


<p>但rails預設會幫你compile所有的圖檔，所以<strong>.png、.jpg等圖檔就不用加進去</strong>了</p>

<h2>3.確認你引入assets的方法有沒有誤</h2>

<p>compile後的assets，檔名會改變，所以傳統引入assets的方法會失效，必須改用rails提供的方法</p>

<ul>
<li>引入js檔使用 <code>&lt;%= javascript_include_tag 'your-js-path' %&gt;</code></li>
<li>引入css檔使用 <code>&lt;%= stylesheet_link_tag 'your-css-path' %&gt;</code></li>
<li>引入圖檔使用 <code>&lt;%= image_tag 'your-image-path' %&gt;</code></li>
<li>js檔裡要再引入asset請使用 <code>&lt;%= asset_path('your-img-path') %&gt;</code></li>
</ul>


<h2>4.Pre-compile it!</h2>

<p>在你的專案目錄裡下指令：</p>

<pre><code class="bash">$ RAILS_ENV=production rake assets:precompile
</code></pre>

<p>就會將assets pre-compile進/public/assets裡頭</p>

<h2>5.修改production的模式設定</h2>

<p>雖然compile了，但production模式預設是不會讓使用者讀取/public/assets的檔案</p>

<p>必須修改 <strong>config/environments/production.rb</strong> 這個檔案</p>

<p>將位在第24行左右的</p>

<pre><code class="ruby production.rb">config.serve_static_assets = false
</code></pre>

<p>改為 <strong>true</strong>:</p>

<pre><code class="ruby production.rb">config.serve_static_assets = true
</code></pre>

<h2>6.使用production mode啟動吧!!</h2>

<p>在專案的目錄裡下指令：</p>

<pre><code class="bash">$ rails s -e production
</code></pre>

<p>就可以使用production mode開啟你的rails專案啦！</p>

<p>使用瀏覽器連入<code>localhost:3000</code>，就可以看到你速度大幅提升的美麗網頁啦！</p>

<p><img src="https://imgur.com/IGxS4QM.jpg" alt="imgur" /></p>

<hr />

<p>測試環境：</p>

<ul>
<li>OS: Mac OS X</li>
<li>Rails version: 4.2.6</li>
<li>Ruby version: 2.0.0p481</li>
<li>Shell: zsh</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[如何在Mac OS X上安裝Verilog環境]]></title>
    <link href="https://easonchang.com/2016/03/18/verilog-on-macosx/"/>
    <updated>2016-03-18T17:40:00+08:00</updated>
    <id>https://easonchang.com/2016/03/18/verilog-on-macosx</id>
    <content type="html"><![CDATA[<blockquote><p>一句話摘要：使用Icarus Verilog來編譯Verilog、使用GTKWave來顯示波形</p></blockquote>

<p>為了資工系的數位電路設計課，我們需要一個能夠編譯Verilog這個硬體描述語言(HDL)的環境，並且要能模擬電路運作狀況加上顯示波形。</p>

<!-- more -->


<p>老師建議的編譯環境是<a href="https://www.mentor.com/products/fpga/model/">ModelSim</a>，但是它只支援Windows，我目前還沒找到Mac OS X或是Linux的版本，所以我只好另尋他法，找看看有沒有其他能夠編譯Verilog的工具。</p>

<p>我找到了<a href="http://iverilog.icarus.com/home">Icarus Verilog</a>，它是針對Linux的Verilog編譯器，而在Mac OS X底下，我們可以藉由Command Line來使用它。</p>

<h1>安裝Icarus Verilog</h1>

<p>這是<a href="http://iverilog.wikia.com/wiki/Installation_Guide">Icarus Verilog的安裝指南</a>，很完整的說明了怎麼在各種作業系統上安裝它，不過是英文的，而且字有點多。</p>

<p>對於Mac OS X你有兩種安裝手段，編譯程式原始碼來安裝，或是透過套件管理系統安裝，對於我這種懶人來說，當然是選擇使用套件管理系統囉！</p>

<p>我使用<a href="http://brew.sh/index_zh-tw.html">Homebrew</a>來安裝Icarus Verilog，如果你還沒有安裝Homebrew，去把它裝起來吧！身為一位Mac用戶兼資工系學生，Homebrew必備呀！</p>

<p>你可以在你的Command Line裡輸入這段文字來安裝Homebrew（請忽略最左方的$符號，這是Command Line的提示字元）：
<code>
$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
</code></p>

<p>接著使用這段homebrew的指令來安裝Icarus Verilog：
<code>
$ brew install icarus-verilog
</code>
OK！現在你已經成功安裝了Icarus Verilog了！Homebrew就是這麼的神奇！</p>

<h1>測試Icarus Verilog</h1>

<p>安裝完了一個新程式，當然是要測試一下它的功能正不正常呀，這時就輪到經典Hello World測試程式登場了！</p>

<p>首先建立一個新文件命名為hello.v，內含以下內容（Verilog的源碼檔副檔名為.v）：
<code>Verilog hello.v
module main;
  initial
    begin
      $display("Hello, World");
      $finish ;
    end
endmodule
</code>
接著使用iverilog指令來編譯hello.v，使用-o hello來指定以hello來作為產生的可執行檔檔名：
<code>
$ iverilog -o hello hello.v
</code>
最後，使用vvp指令來執行hello這個可執行檔，只要你看到Hello, World這個輸出，就代表你的Icarus Verilog安裝成功了：
<code>
$ vvp hello
Hello, World
</code></p>

<h1>安裝GTKWave</h1>

<p>接著，為了能夠更方便地查看電路運作的狀況，你需要一個波型顯示軟體，我使用<a href="http://gtkwave.sourceforge.net">GTKWave</a>，這是一個可以跑在Mac OS X、Linux、和Windows上的波型顯示軟體，使用效果如下圖（截圖自官網）：</p>

<p><img src="https://i.imgur.com/qRG7zAU.jpg" alt="13010278_1324168817596781_1227376771_o.png" /></p>

<p>要在Mac OS X上安裝它很容易，就跟你安裝其他應用程式一樣，最大的困難可能是在官網上找到正確的下載連結&hellip;&hellip;，連結已經幫你標出來了，請在官網上找到上圖紅框處download連結把它點下去！</p>

<p>接著把載下來了.zip檔解壓縮，完畢後得到的.app檔就是你要的GTKWave了！隨點隨用免安裝，那～麼～厲害！</p>

<h1>使用GTKWave來顯示波形</h1>

<h2>建立新的測試程式</h2>

<p>先別急著打開你的GTKWave，你還需要一個新的測試程式，之前的hello world程式可根本不算是一個電路呢！</p>

<p>首先建立兩個新檔案，命名為Simple_Circuit.v和t_Simple_Circuit.v（修改自我們老師的Lab0範例）：</p>

<pre><code class="Verilog Simple_Circuit.v">module  Simple_Circuit(A, B, C, D, E);
  output    D, E;
  input A, B, C;
  wire  w1;

    and     G1(w1, A, B);
    not     G2(E, C);
    or      G3(D, w1, E);
endmodule
</code></pre>

<pre><code class="Verilog t_Simple_Circuit.v">module  t_Simple_Circuit;
  wire  D, E;
  reg       A, B, C;

  //instantiate device under test
  Simple_Circuit    M1(A, B, C, D, E);

  //apply inputs one at a time
  initial   begin
    $dumpfile("mytest.vcd");
    $dumpvars;
    A=1'b0; B=1'b0; C=1'b0;
    #100 A=1'b1; B=1'b1; C=1'b1; 
  end

  initial #200 $finish;
endmodule
</code></pre>

<p>將這兩個檔案編譯為mycircuit這個執行檔，並且執行它：
<code>
$ iverilog -o mycircuit t_Simple_Circuit.v Simple_Circuit.v
$ vvp mycircuit
</code></p>

<p>因為我們在t_Simple_Circuit.v這個電路測試檔案裡頭加入了dumpfile和dumpvars，所以執行完mycircuit後，會產生一個名為mytest.vcd的檔案，裡頭包含了我們所要的波型紀錄。</p>

<p>現在我們可以使用GTKWave來檢視波型了！</p>

<h2>正式開啟GTKWave來檢視波型</h2>

<p>開啟你的GTKWave，點擊左上角的File > Open New Tab
選擇剛剛產生的mytest.vcd檔，你應該會很失望地發現為什麼沒有出現你要的波型，如下圖：</p>

<p><img src="https://i.imgur.com/RJIQuvS.jpg" alt="螢幕快照 2016-03-19 上午1.23.20.png" /></p>

<p>那是因為你還沒有告訴GTKWave你想要看什麼，那我們就來告訴它吧！</p>

<p>在GTKWave左側面板，你會看到一串文字寫著t_Simple_Circuit，那就是你的測試檔案，點開那個+號，點擊M1電路，下面就會列出M1電路裡所有的線路，把你想要看它波形的線路拖曳到右方的區塊吧！噠答！你要的波型顯示出來了！</p>

<p><img src="https://i.imgur.com/86eXv9b.jpg" alt="螢幕快照 2016-03-19 上午1.30.18.png" /></p>

<p>恭喜你成功建置你的Verilog環境，現在你可以炫砲地使用你的Macbook來做數電設計作業了！</p>

<h1>指令小筆記</h1>

<pre><code>$ iverilog -o &lt;output-file&gt; &lt;source-file-1&gt; &lt;source-file-2&gt; ... // 編譯
$ vvp &lt;executable-verilog-file&gt; // 執行
</code></pre>
]]></content>
  </entry>
  
</feed>
